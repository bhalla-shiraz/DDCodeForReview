http://www.zsoltnagy.eu/use-eslint-like-a-pro-with-es6-and-react/

Proptypes
=========
Greeting.defaultProps = {
  name: 'Stranger'
};

import PropTypes from 'prop-types';

MyComponent.propTypes = {
  // You can declare that a prop is a specific JS primitive. By default, these
  // are all optional.
  optionalArray: PropTypes.array,
  optionalBool: PropTypes.bool,
  optionalFunc: PropTypes.func,
  optionalNumber: PropTypes.number,
  optionalObject: PropTypes.object,
  optionalString: PropTypes.string,
  optionalSymbol: PropTypes.symbol,

  // Anything that can be rendered: numbers, strings, elements or an array
  // (or fragment) containing these types.
  optionalNode: PropTypes.node,

  // A React element.
  optionalElement: PropTypes.element,

  // You can also declare that a prop is an instance of a class. This uses
  // JS's instanceof operator.
  optionalMessage: PropTypes.instanceOf(Message),

  // You can ensure that your prop is limited to specific values by treating
  // it as an enum.
  optionalEnum: PropTypes.oneOf(['News', 'Photos']),

  // An object that could be one of many types
  optionalUnion: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number,
    PropTypes.instanceOf(Message)
  ]),

  // An array of a certain type
  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),

  // An object with property values of a certain type
  optionalObjectOf: PropTypes.objectOf(PropTypes.number),

  // An object taking on a particular shape
  optionalObjectWithShape: PropTypes.shape({
    color: PropTypes.string,
    fontSize: PropTypes.number
  }),

  // You can chain any of the above with `isRequired` to make sure a warning
  // is shown if the prop isn't provided.
  requiredFunc: PropTypes.func.isRequired,

  // A value of any data type
  requiredAny: PropTypes.any.isRequired,

  // You can also specify a custom validator. It should return an Error
  // object if the validation fails. Don't `console.warn` or throw, as this
  // won't work inside `oneOfType`.
  customProp: function(props, propName, componentName) {
    if (!/matchme/.test(props[propName])) {
      return new Error(
        'Invalid prop `' + propName + '` supplied to' +
        ' `' + componentName + '`. Validation failed.'
      );
    }
  },

  // You can also supply a custom validator to `arrayOf` and `objectOf`.
  // It should return an Error object if the validation fails. The validator
  // will be called for each key in the array or object. The first two
  // arguments of the validator are the array or object itself, and the
  // current item's key.
  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {
    if (!/matchme/.test(propValue[key])) {
      return new Error(
        'Invalid prop `' + propFullName + '` supplied to' +
        ' `' + componentName + '`. Validation failed.'
      );
    }
  })
};


===================================================================================================================


https://github.com/css-modules/webpack-demo

function Emitter() {
 this.name = ''
 this.callback = () => ({})

 this.subscribe = (name, callback) => {
  this.name = name
  this.callback = callback
  this.list.push({
  	name,
    callback
  })
  return this
 }
 this.emit = (name, foo, bar) => {
 	this.list.forEach((sub) => {
   sub.callback(foo, bar)
  })
 }
 this.release = () => {
 	this.list = this.list.filter((item) => item.name !== this.name)
 }
}

Emitter.prototype.list = []


const emitter = new Emitter()

const sub1 = emitter.subscribe('event_name', (foo, bar) => {
	console.log('sub1', foo, bar)
})

const sub2 = emitter.subscribe('other_name', (foo, bar) => {
	console.log('sub2', foo, bar)
})

emitter.emit('event_name', 'foo', 'bar')

sub1.release()


emitter.emit('event_name', 'foo', 'bar')


=================
Reduce

let testArray = ['a', 'b', 'c' , 'm', 'd' , 'n', 'e']

let result = testArray.reduce((result, item) => {
	return (item > result) ? item : result
}, '0')

console.log(result)

============
